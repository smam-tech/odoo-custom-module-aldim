from itertools import chain

from odoo import api, fields, models, tools, _
from odoo.exceptions import UserError, ValidationError
from odoo.tools import format_datetime
from odoo.tools.misc import formatLang, get_lang

class SMAMStockMoveRequest1(models.Model):
    _inherit = "stock.move.line"

    smam_done = fields.Float(
        string='Done',
        readonly='True',
        digits=(12,3),
        help='Done generated by panjang x lebar x tebal'
    )
    smam_panjang = fields.Float(
        string='Panjang',
        help='Multiplier for done',
        digits=(12,3),
    )
    smam_tebal = fields.Float(
        string='Tebal',
        digits=(12,3),
        help='Multiplier for done'
    )
    smam_lebar = fields.Float(
        string='Lebar',
        digits=(12,3),
        help='Multiplier for done'
    )
    show_smam_panjang = fields.Float(
        string='Panjang',
        readonly='True',
        digits=(12,3),
        compute='_compute_onhand_lot_sn',
    )
    show_smam_tebal = fields.Float(
        string='Tebal',
        readonly='True',
        digits=(12,3),
        compute='_compute_onhand_lot_sn',
    )
    show_smam_lebar = fields.Float(
        string='Lebar',
        readonly='True',
        digits=(12,3),
        compute='_compute_onhand_lot_sn',
    )
    smam_warehouse_name = fields.Char(
        # string='Warehouse Name',
        related='move_id.picking_type_id.warehouse_id.name',
        compute='_compute_warehouse_name',
        store=True
    )

    smam_onhand_lot_sn = fields.Float(
        string='On Hand Lot/SN',
        digits=(12,3),
        compute='_compute_onhand_lot_sn',
        help='On Hand Lot or Serial Number'
    )

    @api.depends('lot_id','product_id')
    def _compute_onhand_lot_sn(self):
        for record in self:
            if record.lot_id and record.product_id:
                quant_record = self.env['stock.quant'].search([
                    ('lot_id','=',record.lot_id.id),
                    ('product_id','=',record.product_id.id),
                    ('location_id','=',record.location_id.id)
                    ])
                record.smam_onhand_lot_sn = quant_record.available_quantity
                record.show_smam_panjang = quant_record.smam_panjang
                record.show_smam_lebar = quant_record.smam_lebar
                record.show_smam_tebal = quant_record.smam_tebal
            else:
                record.smam_onhand_lot_sn = 0
                record.show_smam_panjang = 0
                record.show_smam_lebar = 0
                record.show_smam_tebal = 0

    @api.depends('move_id','picking_type_id')
    def _compute_warehouse_name(self):
        for record in self:
            record.smam_warehouse_name = record.move_id.picking_id.picking_type_id.warehouse_id.name

    @api.onchange('smam_panjang','smam_tebal','smam_lebar')
    def onchange_plt(self):
        for record in self:
            if record.smam_panjang and record.smam_tebal and record.smam_lebar:
                done = record.smam_panjang * record.smam_tebal * record.smam_lebar
                record.smam_done = done
                record.qty_done = done
    
    def increase_plt(self):
        for record in self:
            quants = self.env['stock.quant'].search([
                ("product_id","=",record.product_id.id),
                ("location_id","=",record.location_dest_id.id),
                ("lot_id","=",record.lot_id.id),
                ("package_id","=",record.package_id.id),
                ("owner_id","=",record.owner_id.id)],limit=1)
            quants = quants.sudo()
            if record.smam_panjang:
                quants.smam_panjang += record.smam_panjang
            if record.smam_tebal:
                quants.smam_tebal += record.smam_tebal
            if record.smam_lebar:
                quants.smam_lebar += record.smam_lebar
            # quants2 = self.env['stock.quant'].sudo()
            # quants = quants2._gather(record.product_id, record.location_id, lot_id=record.lot_id, package_id=record.package_id, owner_id=record.owner_id, strict=True)
            # if record.lot_id and record.quantity > 0:
            #     quants = quants.filtered(lambda q: q.lot_id)
            # quant = None
            # if quants:
            #     # see _acquire_one_job for explanations
            #     self._cr.execute("SELECT id FROM stock_quant WHERE id IN %s ORDER BY lot_id LIMIT 1 FOR NO KEY UPDATE SKIP LOCKED", [tuple(quants.ids)])
            #     stock_quant_result = self._cr.fetchone()
            #     if stock_quant_result:
            #         quant = self.browse(stock_quant_result[0])
            # print(quant)
    def decrease_plt(self):
        for record in self:
            quants = self.env['stock.quant'].search([
                ("product_id","=",record.product_id.id),
                ("location_id","=",record.location_id.id),
                ("lot_id","=",record.lot_id.id),
                ("package_id","=",record.package_id.id),
                ("owner_id","=",record.owner_id.id)],limit=1)
            if record.smam_panjang:
                quants.smam_panjang -= record.smam_panjang
            if record.smam_tebal:
                quants.smam_tebal -= record.smam_tebal
            if record.smam_lebar:
                quants.smam_lebar -= record.smam_lebar


    # @api.onchange('qty_done')
    # def check_plt_enough(self):
    #     for record in self:
    #         if record.lot_id and record.smam_onhand_lot_sn < record.qty_done:
    #             raise UserError('The Amount of on hand lot is less than filled done')

class SMAMStockMoveTrueRequest1(models.Model):
    _inherit = "stock.move"

    smam_warehouse_name = fields.Char(
        related='picking_type_id.warehouse_id.name',
        compute='_compute_warehouse_name',
        store=True
    )

    @api.depends('picking_type_id')
    def _compute_warehouse_name(self):
        for record in self:
            record.smam_warehouse_name = record.picking_id.picking_type_id.warehouse_id.name
    
    def action_show_details(self):
        res = super(SMAMStockMoveTrueRequest1, self).action_show_details()
        res['context']['show_plt'] = self.smam_warehouse_name == 'RAWMAT'
        res['context']['smam_warehouse_name'] = self.smam_warehouse_name
        print(res)
        return res
    
    def increase_plt(self):
        for x in self:
            for z in x.move_line_ids:
                z.increase_plt()
    
    def decrease_plt(self):
        for x in self:
            for z in x.move_line_ids:
                z.decrease_plt()

class SMAMStockPickingRequest1(models.Model):
    _inherit = "stock.picking"

    def increase_plt(self):
        for x in self:
            for z in x.move_line_ids:
                z.increase_plt()

    def decrease_plt(self):
        for x in self:
            for z in x.move_line_ids:
                z.decrease_plt()
    
    smam_warehouse_name = fields.Char(
        related='picking_type_id.warehouse_id.name',
        compute='_compute_warehouse_name',
        store=True
    )

    @api.depends('picking_type_id')
    def _compute_warehouse_name(self):
        for record in self:
            record.smam_warehouse_name = record.picking_id.picking_type_id.warehouse_id.name
